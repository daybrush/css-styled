{"version":3,"file":"styled.min.js","sources":["../src/utils.ts","../src/styled.ts"],"sourcesContent":["import stringHash from \"string-hash\";\nimport { splitComma } from \"@daybrush/utils\";\nimport { InjectOptions } from \"./types\";\n\nexport function getHash(str: string) {\n    return stringHash(str).toString(36);\n}\nexport function getShadowRoot(parentElement: HTMLElement | SVGElement) {\n    if (parentElement && parentElement.getRootNode) {\n        const rootNode = parentElement.getRootNode();\n\n        if (rootNode.nodeType === 11) {\n            return rootNode;\n        }\n    }\n    return;\n}\nexport function replaceStyle(className: string, css: string, options: Partial<InjectOptions>) {\n    if (options.original) {\n        return css;\n    }\n    return css.replace(/([^};{\\s}][^};{]*|^\\s*){/mg, (_, selector) => {\n        const trimmedSelector = selector.trim();\n        return (trimmedSelector ? splitComma(trimmedSelector) : [\"\"]).map(subSelector => {\n            const trimmedSubSelector = subSelector.trim();\n            if (trimmedSubSelector.indexOf(\"@\") === 0) {\n                return trimmedSubSelector;\n            } else if (trimmedSubSelector.indexOf(\":global\") > -1) {\n                return trimmedSubSelector.replace(/\\:global/g, \"\");\n            } else if (trimmedSubSelector.indexOf(\":host\") > -1) {\n                return `${trimmedSubSelector.replace(/\\:host/g, `.${className}`)}`;\n            } else if (trimmedSubSelector) {\n                return `.${className} ${trimmedSubSelector}`;\n            } else {\n                return `.${className}`;\n            }\n        }).join(\", \") + \" {\";\n    });\n}\nexport function injectStyle(className: string, css: string, options: Partial<InjectOptions>, shadowRoot?: Node) {\n    const style = document.createElement(\"style\");\n\n    style.setAttribute(\"type\", \"text/css\");\n    style.setAttribute(\"data-styled-id\", className);\n\n    if (options.nonce) {\n        style.setAttribute(\"nonce\", options.nonce);\n    }\n    style.innerHTML = replaceStyle(className, css, options);\n\n    (shadowRoot || document.head || document.body).appendChild(style);\n    return style;\n}\n","import { getHash, injectStyle, getShadowRoot } from \"./utils\";\nimport { StyledInjector, InjectOptions } from \"./types\";\n\n/**\n * Create an styled object that can be defined and inserted into the css.\n * @param - css styles\n */\nfunction styled(css: string): StyledInjector {\n    const injectClassName = \"rCS\" + getHash(css);\n    let injectCount = 0;\n    let injectElement!: HTMLStyleElement;\n\n    return {\n        className: injectClassName,\n        inject(el: HTMLElement | SVGElement, options: Partial<InjectOptions> = {}) {\n            const shadowRoot = getShadowRoot(el);\n            const firstMount = injectCount === 0;\n            let styleElement: HTMLStyleElement;\n\n            if (shadowRoot || firstMount) {\n                styleElement = injectStyle(injectClassName, css, options, shadowRoot);\n            }\n            if (firstMount) {\n                injectElement = styleElement;\n            }\n            if (!shadowRoot) {\n                ++injectCount;\n            }\n            return {\n                destroy() {\n                    if (shadowRoot) {\n                        el.removeChild(styleElement);\n                        styleElement = null;\n                    } else {\n                        if (injectCount > 0) {\n                            --injectCount;\n                        }\n                        if (injectCount === 0 && injectElement) {\n                            injectElement.parentNode!.removeChild(injectElement);\n                            injectElement = null;\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n\nexport * from \"./types\";\nexport default styled;\n"],"names":["injectStyle","className","css","options","shadowRoot","style","document","createElement","setAttribute","nonce","innerHTML","original","replace","_","selector","trimmedSelector","trim","splitComma","map","subSelector","trimmedSubSelector","indexOf","join","head","body","appendChild","injectElement","injectClassName","stringHash","toString","injectCount","inject","el","styleElement","parentElement","getRootNode","rootNode","nodeType","getShadowRoot","firstMount","destroy","removeChild","parentNode"],"mappings":";;;;;;;;y7BAuCgBA,EAAYC,EAAmBC,EAAaC,EAAiCC,OAtBhEH,EAAmBC,EAuBtCG,EAAQC,SAASC,cAAc,gBAErCF,EAAMG,aAAa,OAAQ,YAC3BH,EAAMG,aAAa,iBAAkBP,GAEjCE,EAAQM,OACRJ,EAAMG,aAAa,QAASL,EAAQM,OAExCJ,EAAMK,WA/BmBT,EA+BMA,EA/BaC,EA+BFA,EAAKC,EA9BnCQ,SACDT,EAEJA,EAAIU,QAAQ,6BAA8B,SAACC,EAAGC,OAC3CC,EAAkBD,EAASE,cACzBD,EAAkBE,EAAWF,GAAmB,CAAC,KAAKG,IAAI,SAAAC,OACxDC,EAAqBD,EAAYH,cACC,IAApCI,EAAmBC,QAAQ,KACpBD,GACyC,EAAzCA,EAAmBC,QAAQ,WAC3BD,EAAmBR,QAAQ,YAAa,KACD,EAAvCQ,EAAmBC,QAAQ,SAC3B,GAAGD,EAAmBR,QAAQ,UAAW,IAAIX,GAC7CmB,EACA,IAAInB,MAAamB,EAEjB,IAAInB,IAEhBqB,KAAK,MAAQ,SAcnBlB,GAAcE,SAASiB,MAAQjB,SAASkB,MAAMC,YAAYpB,GACpDA,SC5CX,SAAgBH,OAGRwB,EAFEC,EAAkB,MDHjBC,ECGiC1B,GDHjB2B,SAAS,ICI5BC,EAAc,QAGX,CACH7B,UAAW0B,EACXI,OAAA,SAAOC,EAA8B7B,gBAAAA,UAG7B8B,EAFE7B,WDRY8B,MACtBA,GAAiBA,EAAcC,YAAa,KACtCC,EAAWF,EAAcC,iBAEL,KAAtBC,EAASC,gBACFD,GCGYE,CAAcN,GAC3BO,EAA6B,IAAhBT,SAGf1B,GAAcmC,KACdN,EAAejC,EAAY2B,EAAiBzB,EAAKC,EAASC,IAE1DmC,IACAb,EAAgBO,GAEf7B,KACC0B,EAEC,CACHU,QAAA,WACQpC,GACA4B,EAAGS,YAAYR,GACfA,EAAe,OAEG,EAAdH,KACEA,EAEc,IAAhBA,GAAqBJ,IACrBA,EAAcgB,WAAYD,YAAYf,GACtCA,EAAgB"}